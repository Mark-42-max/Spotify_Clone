{"version":3,"sources":["Components/Login.js","useAuth.js","Components/PopulateSongs.js","Components/Player.js","Components/Dashboard.js","App.js","registerServiceWorker.js","index.js"],"names":["Login","react_default","a","createElement","reactstrap_module","className","style","minHeight","href","useAuth","code","_useState","useState","_useState2","Object","slicedToArray","accessToken","setAccessToken","_useState3","_useState4","refreshToken","setRefreshToken","_useState5","_useState6","expiresIn","setExpiresIn","useEffect","axios","method","url","data","then","res","window","history","pushState","catch","err","console","error","interval","setInterval","post","clearInterval","PopulateSongs","_ref","result","sendUri","cursor","onClick","gridTemplateColumns","concat","height","src","image","alt","name","width","artist","Player","playing","setPlaying","esm","token","showSaveIcon","magnifySliderOnHover","initialVolume","callback","state","isPlaying","play","uris","Dashboard","search","setSearch","playingSong","setPlayingSong","searchResult","setSearchResult","spotifyApi","SpotifyWebApi","clientId","cancel","searchTracks","body","tracks","items","map","item","smallest","album","images","reduce","prevImg","currentImg","artists","uri","log","getUri","type","placeholder","bsSize","value","onChange","e","target","length","Components_PopulateSongs","key","Components_Player","App","URLSearchParams","location","get","Components_Dashboard","Components_Login","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.afffa91d.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Container} from 'reactstrap'\r\n\r\nconst Login = () => {\r\n\r\n    const AUTH_URL = \"https://accounts.spotify.com/authorize?client_id=831d4897ac7646da97fecad41eb430ef&response_type=code&redirect_uri=https://mark-42-max.github.io/Spotify_Clone/&scope=streaming%20user-read-private%20user-read-email%20user-library-read%20user-library-modify%20user-read-playback-state%20user-modify-playback-state%20\";\r\n\r\n    return (\r\n        <Container className=\"d-flex justify-content-center align-items-center\" style={{minHeight:\"100vh\"}}>\r\n            <a className=\"btn btn-success btn-lg\" href={AUTH_URL}>Login With Spotify</a>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Login","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst useAuth = code => {\r\n  const [accessToken, setAccessToken] = useState();\r\n  const [refreshToken, setRefreshToken] = useState();\r\n  const [expiresIn, setExpiresIn] = useState();\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"post\",\r\n      url: \"https://spotify-backend2001.herokuapp.com/login\",\r\n      data: {\r\n        code: code\r\n      }\r\n    })\r\n      .then(res => {\r\n        setAccessToken(res.data.accessToken);\r\n        setRefreshToken(res.data.refreshToken);\r\n        setExpiresIn(res.data.expiresIn);\r\n        window.history.pushState({}, null, \"/\");\r\n      })\r\n      .catch((err) => {\r\n        //window.location.href = \"/\";\r\n        console.error(err);\r\n      });\r\n  }, [code]);\r\n\r\n  useEffect(() => {\r\n    if (!refreshToken || !expiresIn ) return;\r\n    const interval = setInterval(() => {\r\n      axios\r\n        .post(\"https://spotify-backend2001.herokuapp.com/refresh\", {\r\n          refreshToken,\r\n        })\r\n        .then(res => {\r\n          setAccessToken(res.data.accessToken)\r\n          setExpiresIn(res.data.expiresIn)\r\n        })\r\n        .catch((err) => {\r\n          //window.location = \"/\"\r\n          console.error(err);\r\n        })\r\n    }, (expiresIn - 60) * 1000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [expiresIn, refreshToken]);\r\n\r\n\r\n  return accessToken;\r\n};\r\n\r\nexport default useAuth;\r\n","import React from 'react'\r\n\r\nconst PopulateSongs = ({result, sendUri}) => {\r\n\r\n\r\n  const handleClick = () => {\r\n    sendUri(result);\r\n  }\r\n\r\n  return (\r\n    <div \r\n    style={{cursor: \"pointer\"}}\r\n    className=\"d-flex m-2 row border border-success rounded-3\" \r\n    onClick={handleClick}\r\n    >\r\n        <div className=\"col-1\" style={{gridTemplateColumns: `${result.height}px 70%`}}>\r\n            <img src={result.image} alt={result.name} width=\"64px\" height=\"64px\" />\r\n        </div>\r\n        <div className=\"col-sm\">\r\n            <div>{result.name}</div>\r\n            <div className=\"text-muted\">{result.artist.name}</div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PopulateSongs","import React, { useEffect, useState } from \"react\";\r\nimport SpotifyPlayer from \"react-spotify-web-playback\";\r\n\r\nconst Player = ({ accessToken, url }) => {\r\n  const [playing, setPlaying] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setPlaying(true);\r\n  }, [url]);\r\n\r\n  if (!accessToken) return null;\r\n    return (\r\n      <div>\r\n        <SpotifyPlayer\r\n          token={accessToken}\r\n          showSaveIcon={true}\r\n          magnifySliderOnHover={true}\r\n          initialVolume = {0.5}\r\n          callback={state => {\r\n            !state.isPlaying && setPlaying(false);\r\n          }}\r\n          play={playing}\r\n          uris={url ? [url] : []}\r\n        />\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Player;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport useAuth from \"../useAuth\";\r\nimport { Container, Input } from \"reactstrap\";\r\nimport SpotifyWebApi from \"spotify-web-api-node\"\r\nimport PopulateSongs from \"./PopulateSongs\";\r\nimport Player from \"./Player\";\r\n\r\nconst Dashboard = ({ code }) => {\r\n  const accessToken = useAuth(code);\r\n\r\n  const [search, setSearch] = useState(\"\");\r\n  const [playingSong, setPlayingSong] = useState();\r\n  const [searchResult, setSearchResult] = useState([]);\r\n\r\n  const spotifyApi = new SpotifyWebApi({\r\n    clientId: \"831d4897ac7646da97fecad41eb430ef\",\r\n  });\r\n\r\n  // useEffect(() => {\r\n  //   if (!accessToken) {console.log(\"No access token\"); return};\r\n\r\n  //   spotifyApi.setAccessToken(accessToken);\r\n  //   console.log(spotifyApi.getAccessToken());\r\n  //   console.log(\"Token Changed\");\r\n  // }, [accessToken]);\r\n\r\n  useEffect(() => {\r\n    if (!accessToken) return;\r\n\r\n    spotifyApi.setAccessToken(accessToken);\r\n    if(search){\r\n      let cancel = false;\r\n      spotifyApi.searchTracks(search)\r\n      .then(data => {\r\n        if(cancel) return;\r\n        setSearchResult(data.body.tracks.items.map(item => {\r\n\r\n          const smallest = item.album.images.reduce((prevImg, currentImg) => {\r\n            if(currentImg.height < prevImg.height) return currentImg;\r\n            return prevImg;\r\n          }, item.album.images[0]);\r\n\r\n          return {\r\n            artist: item.artists[0],\r\n            name: item.name,\r\n            uri: item.uri,\r\n            image: smallest.url, \r\n            height: smallest.height\r\n          }\r\n        }))\r\n      }).catch(err => console.log(err));\r\n\r\n      console.log(searchResult);\r\n      return () => cancel = true;\r\n    }\r\n\r\n  }, [accessToken, search])\r\n\r\n  const getUri = (result)=> {\r\n    setPlayingSong(result);\r\n    setSearch(\"\");\r\n  }\r\n\r\n  return (\r\n    <Container className=\"d-flex flex-column py-2\" style={{height: \"100vh\"}}>\r\n      \r\n      <Input type=\"search\" \r\n      placeholder=\"Search Songs/Artists\" \r\n      bsSize=\"lg\"\r\n      value={search} \r\n      onChange={(e) => {setSearch(e.target.value)} }\r\n      />\r\n\r\n      <div className=\"flex-grow-1 my-2 container\">\r\n\r\n        {search ? \r\n        searchResult.length > 0 ? searchResult.map(item => {\r\n          return <PopulateSongs result={item} key={item.uri} sendUri={getUri}/>\r\n        }) : <div>Loading...</div> \r\n        : null}\r\n        \r\n      </div>\r\n      <div><Player accessToken={accessToken && accessToken} url={playingSong && playingSong.uri}/></div>\r\n\r\n    </Container>\r\n  )\r\n};\r\n\r\nexport default Dashboard;\r\n","import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Login from './Components/Login'\r\nimport Dashboard from './Components/Dashboard'\r\n\r\nfunction App() {\r\n\r\n  const code = new URLSearchParams(window.location.search).get('code');\r\n\r\n  return (\r\n    <div>\r\n      {code ? <Dashboard code={code}/>:<Login />}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}